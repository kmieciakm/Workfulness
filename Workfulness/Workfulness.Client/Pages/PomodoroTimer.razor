@page "/pomodoro"
@inject IPomodoroTimer counter;
@inject IAudioPlayer audioPlayer;
@inject IBeepPlayer beepPlayer;
@inject IPageSize pageSize;

<div class="center_context mt-4">
    @if (_ImageUrl != null)
    {
        <div class="image" style='background-image: url("@_ImageUrl"); height: @(pageSize.IsExtraLarge ? "300px" : "200px")' />
    }
    <div class="timer mt-2 mt-4">
        @*<div class="settings_bar">
            <i class="fas fa-cogs btn-icon"></i>
        </div>*@
        <div class="clock">
            <div class="clock_time">@counter.ShortTime</div>
            <div class="clock_controls">
                <div class="btn-circle" @onclick="e => counter.StartCount()"><i class="fas fa-play"></i></div>
                <div class="btn-circle" @onclick="e => counter.StopCount()"><i class="fas fa-pause"></i></div>
            </div>
        </div>
        <div class="timespan">
            <ul class="timespan_options">
                <li id="btn_work" class='@(counter.CurrentState.Equals(PomodoroState.WORK) ? "active" : "")' @onclick='e => counter.WorkSession(_WorkTime)'>Work</li>
                <li id="btn_short_break" class='@(counter.CurrentState.Equals(PomodoroState.SHORT_BREAK) ? "active": "")' @onclick='e => counter.ShortBreakSession(_ShortBreak)'>Short break</li>
                <li id="btn_long_break" class='@(counter.CurrentState.Equals(PomodoroState.LONG_BREAK) ? "active": "")' @onclick='e => counter.LongBreakSession(_LongBreak)'>Long break</li>
            </ul>
        </div>
    </div>
</div>

@code {
    private int _WorkTime { get; set; } = 25;
    private int _ShortBreak { get; set; } = 5;
    private int _LongBreak { get; set; } = 15;
    private string _ImageUrl
    {
        get
        {
            switch (counter.CurrentState)
            {
                case PomodoroState.WORK:
                    return "../photos/work-img.png";
                case PomodoroState.SHORT_BREAK:
                    return "../photos/short-break-img.png";
                case PomodoroState.LONG_BREAK:
                    return "../photos/long-break-img.png";
                default:
                    return null;
            }
        }
    }

    protected override void OnInitialized()
    {
        counter.OnTick += () => { StateHasChanged(); };
        counter.OnFinished += () => { Beep(); };
        pageSize.PageResized += () => { StateHasChanged(); };
    }

    public async void Beep()
    {
        await audioPlayer.Pause();

        var beepUrl = "./songs/alarm.mp3";
        await Task.Delay(1000);
        await beepPlayer.PlayBeep(beepUrl);
        beepPlayer.BeepHasFinished += async () => { await audioPlayer.Play(); };
    }
}
