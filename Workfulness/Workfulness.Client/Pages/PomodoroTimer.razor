@page "/pomodoro"
@inject IPomodoroTimer counter;
@inject IAudioPlayer audioPlayer;
@inject IBeepPlayer beepPlayer;


<div class="centerContext mt-5">
    <div>
        <button class="btn btn-primary" @onclick="e => { counter.SetTime(_WorkTime); counter.StartCount(); }">Work</button>
        <button class="btn btn-warning" @onclick="e =>  { counter.SetTime(_ShortBraek); counter.StartCount(); }"> Short break</button>
        <button class="btn btn-warning" @onclick="e =>  { counter.SetTime(_LongBraek); counter.StartCount(); }"> Long break</button>
    </div>
    <p class="time p-5 text-center">@counter.ShortTime</p>
    <div>
        <button class="btn btn-success" @onclick="e => counter.StartCount()">Start</button>
        <button class="btn btn-danger" @onclick="e => counter.StopCount()">Stop</button>
    </div>
</div>

@code {
    private int _WorkTime { get; set; } = 25;
    private int _ShortBraek { get; set; } = 5;
    private int _LongBraek { get; set; } = 15;

    protected override void OnInitialized()
    {
        counter.OnTick += () => { StateHasChanged(); };
        counter.OnFinished += () => { Beep(); };
    }
    public async void Beep()
    {
        await audioPlayer.Pause();

        var beepUrl = "./songs/alarm.mp3";
        await Task.Delay(1000);
        await beepPlayer.PlayBeep(beepUrl);
        beepPlayer.BeepHasFinished += async () => { await audioPlayer.Play(); };

    }
}
